@page "/login"
@using KawanLamaKhairilIlham.Services.Interfaces
@inject IUserService UserService
@inject NavigationManager Navigation

<h3>Login</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>User Name:</label>
        <InputText @bind-Value="loginModel.UserName" class="form-control" />
    </div>

    <div>
        <label>Password:</label>
        <InputText @bind-Value="loginModel.Password" type="password" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary mt-2">Login</button>
    <button type="button" class="btn btn-secondary mt-2" @onclick="RedirectToRegister">Register</button>
</EditForm>

@code {
    private LoginModel loginModel = new LoginModel();
    private string ErrorMessage;

    private async Task HandleLogin()
    {
        var isValidUser = await UserService.ValidateUserAsync(loginModel.UserName, loginModel.Password);

        if (isValidUser)
        {
            Navigation.NavigateTo("/todos");
        }
        else
        {
            ErrorMessage = "Invalid login attempt.";
        }
    }

    private void RedirectToRegister()
    {
        Navigation.NavigateTo("/register"); // Navigate to the Register page
    }

    public class LoginModel
    {
        public string UserName { get; set; }
        public string Password { get; set; }
    }
}
